#!/usr/bin/env bash

########################################################################################################################
# Install-RoonServer - Installs, configures, and starts Roon Server
# Copyright (c) 2024 Noble Factor
# SPDX Document reference
########################################################################################################################

# TODO (david-noble) Reference SPDX document that references MIT and Roon software terms and conditions.

set -o errexit -o nounset -o pipefail

###########
# Variables
###########

declare -r script_root="$(cd "$(dirname "$0")" && pwd)"
declare -r script_name="$(basename "$0")"

declare -r prefix=/opt/local

# From the environment with defaults for the benefit of users who might wish to self-install

declare -r roon_serverroot="${ROON_SERVERROOT:-${prefix}/share/roon/roonserver}"
declare -r roon_dataprefix="${ROON_DATAPREFIX:-${prefix}/var/roon}"

# Derived from the environment

declare -r roon_server_name="$(basename "$roon_serverroot")"
declare -r roon_systemroot="${prefix}/lib/systemd/system"
declare -r roon_service_name="${roon_server_name}.service"
declare -r roon_service_path="${roon_systemroot}/${roon_service_name}"

declare -r roon_approot="$(dirname "${roon_serverroot}")"
declare -r roon_data_location="${roon_dataprefix}/data"
declare -r roon_music_location="${roon_dataprefix}/music"
declare -r roon_backup_location="${roon_dataprefix}/backup"

###########
# Functions
###########

function usage {

    cat 1>&2 <<EOF

NAME
       ${script_name} - installs, configures, and starts Roon Server

SYNOPSIS
       ${script_name} [--package <address>] [--roon-user-uid <roon-user-uid> --roon-user-gid <roon-user-gid>] [--timezone <timezone>] [--help]

DESCRIPTION
       ${script_name} requires root privileges. It is useful for deploying a Roon Server to a dedicated Linux machine, and
       running Roon Server in a Linux container. The first time it runs, Roon Server is installed, configured, and started.
       On subquent runs, it will detect the installation and simply start the service; nothing more.

       Following deployment on a dedicated Linux machine, manage the Roon Server service with systemctl. Uninstall the Roon 
       Server service with \$ROON_SERVERROOT/Uninstall-roonserver.

       When running Roon Server in a Linux container, care is taken to ensure that no privileged systemctl operations are run.
       Following deployment, rely on docker for service management.

DEPLOYMENT PROCESS
       ${script_name} first checks if Roon Server is installed. If it is not installed, it is deployed as follows:

           1. The localtime is set. The default local time is Etc/UTC. Override this value with the --timezone option.

           2. The Roon Server package for Linux AMD64 is downloaded from the specified package address. The default package
              address is:

                  https://download.roonlabs.net/builds/RoonServer_linuxx64.tar.bz2

              Override this value with the --package option.

           3. The Roon Server package is unpacked on ROON_SERVERROOT. The default value for ROON_SERVERROOT is:

                  /opt/local/share/roon/roonserver

              Override this value by exporting an alternative value for ROON_SERVERROOT.

           4. A Roon Server unit file is created on:

                  /opt/local/lib/systemd/system/roonserver.service

              This value cannnot be overridden.

           5. Creates a symbolic link to the Roon Server unit file on:

                  /etc/systemd/system/roonserver.service

              This value cannnot be overridden.

           6. Ensures that the ROON_DATAROOT directory is created and ready for reading/writing. The default ROON_DATAROOT
              value is:

                 /opt/local/var/roon

              Override it by exporting an alternative value for ROON_DATAROOT.

           7. Ensures that the data, music, and backup are created and ready for reading/writing on ROON_DATAROOT.

              The data, music, and backup directory locations cannot be overridden. Use these directories as mount points or
              create symbolic links at these locations, if the data should be stored elsewhere.

       Following deployment, ${script_name} enables and starts the Roon Server service.

OPTIONS
       -h|--help
           Prints this usage text and exits.

       --package
           Download address. Common addresses are file, ftp, and http locations.
           Default: https://download.roonlabs.net/builds/RoonServer_linuxx64.tar.bz2

       --roon-user-uid
           When running in a container, this is the User ID to assign to \$ROON_USER. This should be the numeric ID
           of the user owner of \$ROON_DATAROOT on the Docker host.

       --roon-user-gid
           When running in a container, this is the Group ID to assign to \$ROON_USER. This should be the numeric ID
           of the group owner of \$ROON_DATAROOT on the Docker host.

       --timezone
           Specifies the timezone for containers.
           Default: Etc/UTC.
EOF
    exit 0
}

function New-RoonUser() {

    # Reference: Run Roon Under Non-root at https://share.google/aimode/KVkn2jIJQRHh999jj

    local -r user="${1:-}"
    local -r uid="${2:-}"
    local -r gid="${3:-${2:-}}"

    if ! id "${user}" > /dev/null 2>&1; then
        useradd --system --user-group --groups audio --no-create-home "${user}"
    fi

    if [[ -n ${uid:-} ]]; then
        local -r current_uid="$(id --user "${user}")"
        if [[ $current_uid != $uid ]]; then
            if ! usermod --uid ${uid} "${user}" > /dev/null 2>&1; then
                note "Retained user ID $(id --user "${user}") for Roon user ${user} because user ID ${uid} is assigned to $(getent passwd "${uid}")."
            fi
        fi
    fi

    if [[ -n ${gid:-} ]]; then
        local -r current_gid="$(id --group "${user}")"
        if [[ $current_gid != $gid ]]; then
            if ! groupmod --gid "${gid}" "${user}" > /dev/null 2>&1; then
                note "Retained primary group ID $(id --group "${user}") for Roon user ${user} because group Id ${gid} is assigned to $(getent group "${gid}")."
            fi
        fi
    fi

    note "Roon user: $(id "${user}")"

    chown --verbose -R "${user}:${user}" "${roon_serverroot}"
    
    shopt -s nullglob
    for f in /tmp/roon*; do
        chown -R "${user}:${user}" "$f"
    done
    shopt -u nullglob
}

function New-TargetDirectory {
    
    local -r description="$1" target_directory="$2"
    
    if mkdir -p "$target_directory" 2> /dev/null && [[ -r "$target_directory" ]] && [[ -w "$target_directory" ]]; then
        note "${description} directory is ready at '$target_directory'"
    else
        error 1 "Failed to create r/w ${description} directory: '$target_directory'"
    fi
}

function error {
    local exit_code=$1 && shift 1
    echo "[${script_name} error] $@" 1>&2
    exit $exit_code
}

function note {
    echo "[${script_name} note] $@"
}

function on_error_or_interrupt {
    
    local -r service_unit_filename=/etc/systemd/system/${roon_service_name}
    local -r real_service_unit_filename=$(readlink --canonicalize-missing ${service_unit_filename})

    systemctl stop "$roon_server_name" >/dev/null 2>&1 || true
    
    rm -rf \
        "$roon_serverroot" \
        "$roon_service_path" \
        "$service_unit_filename" \
        "$real_service_unit_filename" >/dev/null 2>&1 || true

    ln --force --symbolic ${previous_localtime} /etc/localtime
}

###################
# Prerequsite check
###################

declare arch=$(uname -m)

if [[ $EUID -ne 0 ]]; then
    error 1 "Must run as root."
fi

if [[ $arch != x86_64 ]]; then
    error 1 "Requires x86_64, not $arch."
fi

###########
# Arguments
###########

declare -r args=$(getopt --name "$script_name" --options "h" --longoptions "help,roon-package:,roon-user:,timezone:" -- $* || echo exit)
eval set -- "$args"

while [[ $1 != '--' ]]; do
    case $1 in
    -h|--help)
        usage; # does not return
        shift 1
        ;;
    --roon-package)
        declare -r package="$2"
        shift 2
        ;;
    --roon-user)
        eval $(echo "$2" | awk -F':' '
        {
            print "roon_user=''" $1 "''"
            print "roon_user_uid=''" $2 "''"
            print "roon_user_gid=''" $3 "''"
        }')
        shift 2
        ;;
    --timezone)
        declare -r timezone="$2"
        shift 2
        ;;
    *)
        error 1 "Unrecognized option: $1"
        ;;
  esac

done

[[ -n ${package:-}   ]] || declare -r package='https://download.roonlabs.net/builds/RoonServer_linuxx64.tar.bz2'
[[ -n ${roon_user:-} ]] || declare -r roon_user=${ROON_USER:-roon}
[[ -n ${timezone:-}  ]] || declare -r timezone='Etc/UTC'

###########
# Main
###########

if [[ ! -f "/etc/systemd/system/${roon_service_name}" ]]; then

    declare -r previous_localtime=$(readlink /etc/localtime)

    echo "-----------------------------------------"
    echo "I N S T A L L I N G  R O O N  S E R V E R"
    echo "-----------------------------------------"
    echo ""

    trap on_error_or_interrupt ERR SIGINT SIGTERM
    /usr/sbin/avahi-daemon --version
    set | grep "^roon_.*"
    echo ""

    if [[ -f /.dockerenv ]]; then
        ln --force --symbolic "/usr/share/zoneinfo/${timezone}" /etc/localtime
    else
        timedatectl set-timezone "${timezone}" 2> /dev/null
    fi

    # Setup directory structure
    
    New-TargetDirectory 'Roon Server' "$roon_serverroot"
    New-TargetDirectory 'Roon Server service unit file' "$roon_systemroot"
    New-TargetDirectory 'Roon data' "$roon_data_location"
    New-TargetDirectory 'Roon music' "$roon_music_location"
    New-TargetDirectory 'Roon backup' "$roon_backup_location"

    # Ensure data root and server root are distinct paths
    ## Rationale provided by Roon: This causes difficult update issues (and we concur).

    if [[ "$(readlink -f "$roon_data_location")" == "$(readlink -f "$roon_serverroot")" ]]; then
        error 1 "ROON_DATAROOT ($roon_data_location) and ROON_SERVERROOT ($roon_serverroot) must not be the same path."
    fi

    note "Downloading and unpacking Roon Server from '${package}' to '${roon_serverroot}'"

    cd "${roon_approot}"
    rm -rf "${roon_server_name}"/*
    curl --location "${package}" --output "${package##*/}" --no-progress-meter
    tar -xjf "${package##*/}" --directory ${roon_server_name} --strip-components=1

    # Check installation and clean up

    [[ -f "${roon_server_name}/check.sh" ]] || error 1 "Cannot check installation because '${roon_server_name}/check.sh' is missing."
    "${roon_server_name}/check.sh"
    rm -f "${package##*/}"

    # Create service unit (whether we're running on docker without the systemd service manager or not)

    cat > "${roon_service_path}" << END_SERVICE_UNIT
[Unit]
Description=${roon_server_name}
After=network-online.target

[Service]
Type=simple
User=${roon_user}
Environment=ROON_SERVERROOT="${roon_serverroot}"
Environment=ROON_DATAROOT="${roon_data_location}"
Environment=ROON_ID_DIR="${roon_data_location}"
ExecStart="${roon_serverroot}/start.sh"
Restart=on-abort

[Install]
WantedBy=multi-user.target
END_SERVICE_UNIT

    mkdir -p /etc/systemd/system && ln --force --symbolic "${roon_service_path}" "/etc/systemd/system/${roon_service_name}"
    trap - ERR SIGINT SIGTERM
fi

echo "-------------------------------------"
echo "S T A R T I N G  R O O N  S E R V E R"
echo "-------------------------------------"
echo ""

New-RoonUser "$roon_user" "${roon_user_uid:-}" "${roon_user_gid:-}"

if [[ -f /.dockerenv ]]; then
    note "Invoking ${roon_serverroot}/start.sh"
    ROON_SERVERROOT="${roon_serverroot}" ROON_DATAROOT="${roon_data_location}" ROON_ID_DIR="${roon_data_location}" ROON_USER="${roon_user}" exec "${roon_serverroot}/start.sh"
else
    if [[ $(systemctl is-enabled "${roon_service_name}") != enabled ]]; then
        note "Enabling ${roon_service_name}"
        systemctl enable "${roon_service_name}"
    fi
    systemctl start "${roon_service_name}"
    systemctl status "${roon_service_name}"
fi
